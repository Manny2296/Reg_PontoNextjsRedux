{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"C:\\\\Users\\\\Riano\\\\Repo\\\\RegistradorPonto\\\\pages\\\\_app.js\";\nvar __jsx = React.createElement;\n// import App from 'next/app'\nimport Store from '../store/configureStore';\nimport { Provider } from 'react-redux';\nimport App from \"next/app\";\nimport React from \"react\";\nimport withRedux from \"next-redux-wrapper\";\nimport { createStore } from \"redux\";\nimport AddRegPonto from '../store/reducers/dataReducer';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport UserContext from '../components/UserContext'; //import {makeStore} from \"../lib/redux\";\n\nimport reduxStore from '../lib/redux';\n\nconst makeStore = (initialState, options) => {\n  return createStore(AddRegPonto, initialState);\n};\n\nclass RegistroPontoMF extends App {\n  /*static async getInitialProps({Component, ctx}) {\r\n  console.log(\"Solo entre al app una vez\")\r\n    // we can dispatch from here too\r\n    ctx.store.dispatch({type: 'ADD_REG_PONTO', value: [{\"name\": \"Manuel Felipe\", \"ndoc\": 1018484513,\"horaingreso\":\"07:00:00 AM\", \"horasalida\":\"\"},\r\n    {\"name\": \"Daneil Felipe\", \"ndoc\":79280440,\"horaingreso\":\"07:12:02 AM\", \"horasalida\":\"\"}\r\n    ]});\r\n      const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {};\r\n  \r\n    return {pageProps};\r\n  }*/\n  render() {\n    const {\n      Component,\n      pageProps,\n      store\n    } = this.props; //console.log(this.props.data); <PersistGate persistor={store.__persistor} loading={<div>Loading</div>}>\n\n    return __jsx(Provider, {\n      store: store,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, __jsx(PersistGate, {\n      persistor: store.__PERSISTOR,\n      loading: null,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, __jsx(Component, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }))));\n  }\n\n} // Only uncomment this method if you have blocking data requirements for  </PersistGate>\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n\n\nexport default withRedux(reduxStore)(RegistroPontoMF);","map":{"version":3,"sources":["C:/Users/Riano/Repo/RegistradorPonto/pages/_app.js"],"names":["Store","Provider","App","React","withRedux","createStore","AddRegPonto","PersistGate","UserContext","reduxStore","makeStore","initialState","options","RegistroPontoMF","render","Component","pageProps","store","props","__PERSISTOR"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,MAAkB,yBAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,SAAQC,WAAR,QAA0B,OAA1B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,SAAQC,WAAR,QAA0B,iCAA1B;AACA,OAAOC,WAAP,MAAwB,2BAAxB,C,CACA;;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,MAAMC,SAAS,GAAG,CAACC,YAAD,EAAeC,OAAf,KAA2B;AAC1C,SAAOP,WAAW,CAACC,WAAD,EAAcK,YAAd,CAAlB;AACF,CAFD;;AAIA,MAAME,eAAN,SAA8BX,GAA9B,CAAkC;AAGhC;;;;;;;;;;AAYEY,EAAAA,MAAM,GAAG;AACL,UAAM;AAACC,MAAAA,SAAD;AAAYC,MAAAA,SAAZ;AAAuBC,MAAAA;AAAvB,QAAgC,KAAKC,KAA3C,CADK,CAGL;;AACA,WACI,MAAC,QAAD;AAAU,MAAA,KAAK,EAAED,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,MAAC,WAAD;AAAa,MAAA,SAAS,EAAEA,KAAK,CAACE,WAA9B;AAA2C,MAAA,OAAO,EAAE,IAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACD,MAAC,SAAD,eAAeH,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADC,CADL,CADJ;AAOH;;AA1B6B,C,CA+BhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeZ,SAAS,CAACK,UAAD,CAAT,CAAsBI,eAAtB,CAAf","sourcesContent":["// import App from 'next/app'\r\nimport Store from '../store/configureStore'\r\nimport { Provider } from 'react-redux'\r\nimport App from \"next/app\";\r\nimport React from \"react\";\r\nimport withRedux from \"next-redux-wrapper\";\r\nimport {createStore} from \"redux\"; \r\nimport AddRegPonto from '../store/reducers/dataReducer'\r\nimport {PersistGate} from 'redux-persist/integration/react';\r\nimport UserContext from '../components/UserContext'\r\n//import {makeStore} from \"../lib/redux\";\r\nimport reduxStore from '../lib/redux';\r\n\r\nconst makeStore = (initialState, options) => {\r\n   return createStore(AddRegPonto, initialState);\r\n};\r\n\r\nclass RegistroPontoMF extends App {\r\n\r\n   \r\n  /*static async getInitialProps({Component, ctx}) {\r\n  console.log(\"Solo entre al app una vez\")\r\n    // we can dispatch from here too\r\n    ctx.store.dispatch({type: 'ADD_REG_PONTO', value: [{\"name\": \"Manuel Felipe\", \"ndoc\": 1018484513,\"horaingreso\":\"07:00:00 AM\", \"horasalida\":\"\"},\r\n    {\"name\": \"Daneil Felipe\", \"ndoc\":79280440,\"horaingreso\":\"07:12:02 AM\", \"horasalida\":\"\"}\r\n    ]});\r\n\r\n    const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {};\r\n  \r\n    return {pageProps};\r\n\r\n}*/\r\n    render() {\r\n        const {Component, pageProps, store} = this.props;\r\n\r\n        //console.log(this.props.data); <PersistGate persistor={store.__persistor} loading={<div>Loading</div>}>\r\n        return (\r\n            <Provider store={store}>\r\n                 <PersistGate persistor={store.__PERSISTOR} loading={null}>\r\n                <Component {...pageProps} />\r\n                </PersistGate>\r\n            </Provider>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n  \r\n  // Only uncomment this method if you have blocking data requirements for  </PersistGate>\r\n  // every single page in your application. This disables the ability to\r\n  // perform automatic static optimization, causing every page in your app to\r\n  // be server-side rendered.\r\n  //\r\n  // MyApp.getInitialProps = async (appContext) => {\r\n  //   // calls page's `getInitialProps` and fills `appProps.pageProps`\r\n  //   const appProps = await App.getInitialProps(appContext);\r\n  //\r\n  //   return { ...appProps }\r\n  // }\r\n  \r\n  export default withRedux(reduxStore)(RegistroPontoMF); "]},"metadata":{},"sourceType":"module"}